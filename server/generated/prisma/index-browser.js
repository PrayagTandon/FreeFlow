
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  cognitoid: 'cognitoid',
  name: 'name',
  email: 'email',
  password: 'password',
  metamaskid: 'metamaskid'
};

exports.Prisma.DisputesScalarFieldEnum = {
  id: 'id',
  contractid: 'contractid',
  milestoneid: 'milestoneid',
  raisedby: 'raisedby',
  againstuserid: 'againstuserid',
  description: 'description',
  status: 'status',
  resolution: 'resolution',
  resolutionby: 'resolutionby',
  evidenceurls: 'evidenceurls',
  createdat: 'createdat',
  resolvedat: 'resolvedat'
};

exports.Prisma.FreelancerScalarFieldEnum = {
  id: 'id',
  cognitoid: 'cognitoid',
  name: 'name',
  email: 'email',
  password: 'password',
  metamaskid: 'metamaskid'
};

exports.Prisma.JobpostedScalarFieldEnum = {
  id: 'id',
  clientid: 'clientid',
  name: 'name',
  description: 'description',
  tags: 'tags',
  location: 'location',
  joblevel: 'joblevel',
  budget: 'budget',
  contracttohire: 'contracttohire',
  qualificationspreferred: 'qualificationspreferred',
  postingtime: 'postingtime',
  postingdate: 'postingdate',
  validtill: 'validtill',
  companyname: 'companyname',
  customizable: 'customizable',
  photourls: 'photourls'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderid: 'senderid',
  receiverid: 'receiverid',
  jobid: 'jobid',
  messagetext: 'messagetext',
  messagetype: 'messagetype',
  attachmenturl: 'attachmenturl',
  timestamp: 'timestamp',
  isread: 'isread',
  issystem: 'issystem'
};

exports.Prisma.MilestonesScalarFieldEnum = {
  id: 'id',
  jobid: 'jobid',
  freelancerid: 'freelancerid',
  title: 'title',
  description: 'description',
  duedate: 'duedate',
  amount: 'amount',
  status: 'status'
};

exports.Prisma.NftcredentialScalarFieldEnum = {
  id: 'id',
  freelancerid: 'freelancerid',
  jobid: 'jobid',
  tokenid: 'tokenid',
  rating: 'rating',
  testimonial: 'testimonial',
  isminted: 'isminted',
  txhash: 'txhash',
  createdat: 'createdat'
};

exports.Prisma.PaymentsescrowScalarFieldEnum = {
  id: 'id',
  contractid: 'contractid',
  milestoneid: 'milestoneid',
  type: 'type',
  status: 'status',
  paymentmethod: 'paymentmethod',
  txhash: 'txhash',
  amount: 'amount',
  initiatedby: 'initiatedby',
  receiverid: 'receiverid',
  notes: 'notes',
  timestamp: 'timestamp',
  confirmedat: 'confirmedat'
};

exports.Prisma.ProposalsScalarFieldEnum = {
  id: 'id',
  jobid: 'jobid',
  freelancerid: 'freelancerid',
  coverletter: 'coverletter',
  budgetquoted: 'budgetquoted',
  proposedtimeline: 'proposedtimeline',
  status: 'status',
  submittedat: 'submittedat'
};

exports.Prisma.SmartcontractScalarFieldEnum = {
  id: 'id',
  jobid: 'jobid',
  freelancerid: 'freelancerid',
  clientid: 'clientid',
  startdate: 'startdate',
  enddate: 'enddate',
  escrowamount: 'escrowamount',
  smartcontractaddress: 'smartcontractaddress',
  isactive: 'isactive',
  iscompleted: 'iscompleted',
  isdisputed: 'isdisputed',
  platformfee: 'platformfee',
  paymentmethod: 'paymentmethod',
  terminationreason: 'terminationreason',
  createdat: 'createdat',
  updatedat: 'updatedat'
};

exports.Prisma.StakingScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  stakeamount: 'stakeamount',
  stakepurpose: 'stakepurpose',
  trustscore: 'trustscore',
  resumescore: 'resumescore',
  isvalidator: 'isvalidator',
  startdate: 'startdate',
  enddate: 'enddate',
  active: 'active'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.dispute_status = exports.$Enums.dispute_status = {
  open: 'open',
  under_review: 'under_review',
  resolved: 'resolved',
  rejected: 'rejected'
};

exports.message_type = exports.$Enums.message_type = {
  text: 'text',
  file: 'file',
  system: 'system'
};

exports.milestone_status = exports.$Enums.milestone_status = {
  pending: 'pending',
  in_progress: 'in_progress',
  completed: 'completed',
  approved: 'approved',
  disputed: 'disputed'
};

exports.payment_type = exports.$Enums.payment_type = {
  milestone: 'milestone',
  full: 'full',
  partial: 'partial',
  refund: 'refund'
};

exports.payment_status = exports.$Enums.payment_status = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed',
  refunded: 'refunded'
};

exports.payment_method = exports.$Enums.payment_method = {
  Crypto: 'Crypto',
  Stripe: 'Stripe',
  Wallet: 'Wallet',
  BankTransfer: 'BankTransfer'
};

exports.proposal_status = exports.$Enums.proposal_status = {
  pending: 'pending',
  accepted: 'accepted',
  rejected: 'rejected'
};

exports.stake_purpose = exports.$Enums.stake_purpose = {
  governance: 'governance',
  moderation: 'moderation',
  reputation: 'reputation'
};

exports.Prisma.ModelName = {
  client: 'client',
  disputes: 'disputes',
  freelancer: 'freelancer',
  jobposted: 'jobposted',
  message: 'message',
  milestones: 'milestones',
  nftcredential: 'nftcredential',
  paymentsescrow: 'paymentsescrow',
  proposals: 'proposals',
  smartcontract: 'smartcontract',
  staking: 'staking'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
